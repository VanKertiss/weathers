{"version":3,"sources":["App.module.css","components/InputCity.module.css","components/CardCity.module.css","api/api.js","redux/CityReducer.js","components/InputCity.jsx","components/Card.jsx","components/CardCity.jsx","redux/reduxStore.js","App.js","index.js"],"names":["module","exports","CityAPI","getData","CityName","axios","then","response","GET_CITY_DATA","initialState","cityData","cityNames","searchCitiesAC","cityReducer","state","action","type","payload","InputCity","props","useState","input","setInput","className","S","inputContainer","placeholder","onChange","e","inputNameCity","currentTarget","value","onClick","getCityData","InputCityContainer","connect","dispatch","a","data","cityName","name","temp","Math","round","main","pressure","humidity","windSpeed","wind","speed","windDeg","deg","nowTime","Date","toLocaleTimeString","searchCities","getCities","code","Card","styles","arrow","transform","cardItem","style","src","alt","button","CardCityContainer","addCardCity","dataCity","map","city","deliteCityCardAC","key","cardBody","redusers","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","window","App","CardCity","AppIni","ReactDOM","render","getState","document","getElementById"],"mappings":"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","file":"static/js/main.a3eed17f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardCity\":\"App_cardCity__2bdS0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputContainer\":\"InputCity_inputContainer__dZ6sI\",\"input\":\"InputCity_input__rqxj5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardBody\":\"CardCity_cardBody__3RIiA\",\"cardItem\":\"CardCity_cardItem__ETwUx\",\"arrow\":\"CardCity_arrow__19kUZ\",\"button\":\"CardCity_button__h-9Db\"};","import * as axios from 'axios';\r\n\r\n//const axios = require('axios');\r\n\r\n/*const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'api.openweathermap.org/data/2.5/',\r\n    headers: {\r\n        'appid': '4198676c9d5e2a36c40751f71418dc1a',\r\n        'lang': 'ru'\r\n    }\r\n});*/\r\nconst baseURL = `https://api.openweathermap.org/data/2.5/weather`\r\nconst appid = `4198676c9d5e2a36c40751f71418dc1a`;\r\nconst lang = `ru`;\r\n\r\nexport const CityAPI = {\r\n    getData(CityName) {\r\n        return axios.get(`${baseURL}?q=${CityName}&appid=${appid}&lang=${lang}`)\r\n            .then(response => response)\r\n\r\n    }\r\n}","import {\r\n    CityAPI\r\n} from '../api/api';\r\n\r\nconst GET_CITY_DATA = 'GET_CITY_DATA';\r\n\r\nlet initialState = {\r\n    cityData: [\r\n\r\n    ],\r\n    cityNames: []\r\n};\r\n\r\nconst cityReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case GET_CITY_DATA:\r\n            return {\r\n                ...state,\r\n                cityData: [...state.cityData, action.payload]\r\n            }\r\n            default:\r\n                return state;\r\n    }\r\n}\r\n\r\nexport const getCityDataAC = (response) => ({\r\n    type: GET_CITY_DATA,\r\n    payload: {\r\n        cityName: response.data.name,\r\n        temp: Math.round(response.data.main.temp - 273),\r\n        pressure: response.data.main.pressure,\r\n        humidity: response.data.main.humidity,\r\n        windSpeed: response.data.wind.speed,\r\n        windDeg: response.data.wind.deg,\r\n        nowTime: new Date().toLocaleTimeString(),\r\n\r\n    }\r\n})\r\n\r\nconst searchCitiesAC = () => ({\r\n\r\n})\r\n\r\nexport const getCityData = (input) => async (dispatch) => {\r\n    let data = await CityAPI.getData(input)\r\n\r\n    dispatch(getCityDataAC(data))\r\n}\r\n\r\nexport const searchCities = (inputNameCity) => async (dispatch) => {\r\n    let data = await CityAPI.getCities(inputNameCity)\r\n    if (data.code === 200) {\r\n        dispatch(searchCitiesAC)\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default cityReducer;","import React, { useState } from \"react\";\r\nimport S from \"./InputCity.module.css\";\r\nimport { getCityData, searchCities } from \"../redux/CityReducer\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst InputCity = (props) => {\r\n  let [input, setInput] = useState(null);\r\n\r\n  const GetNameCity = () => {\r\n    props.getCityData(input);\r\n  };\r\n\r\n  const changeInput = (e) => {\r\n    let inputNameCity = e.currentTarget.value;\r\n    setInput(inputNameCity);\r\n    /*if (inputNameCity.length > 2) {\r\n      props.searchCities(inputNameCity);\r\n    }*/\r\n  };\r\n\r\n  return (\r\n    <div className={S.inputContainer}>\r\n      <input\r\n        className={S.input}\r\n        type=\"text\"\r\n        placeholder=\" Введите название города\"\r\n        onChange={changeInput}\r\n      />\r\n      <button onClick={GetNameCity}>Получить данные в карте</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {};\r\n};\r\n\r\nexport const InputCityContainer = connect(mapStateToProps, {\r\n  getCityData,\r\n  searchCities,\r\n})(InputCity);\r\n\r\nexport default InputCity;\r\n","import S from \"./CardCity.module.css\";\r\n\r\nconst arrow =\r\n  \"http://ig54.ru/wp-content/uploads/2017/02/%D0%9A%D0%BD%D0%BE%D0%BF%D0%BA%D0%B0-%D0%B2%D0%B2%D0%B5%D1%80%D1%85.png\";\r\n\r\nconst Card = (props) => {\r\n  const styles = {\r\n    arrow: {\r\n      transform: `rotate(` + props.windDeg + `deg)`,\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div className={S.cardItem}>\r\n      <div> Город : {props.cityName}</div>\r\n      <div> Температура : {props.temp} &deg;С</div>\r\n      <div> Влажность : {props.humidity} %</div>\r\n      <div> Давление : {props.pressure} мм рт. ст.</div>\r\n      <div>\r\n        {\" \"}\r\n        Ветер : {props.windSpeed} м/с{\" \"}\r\n        <img\r\n          style={styles.arrow}\r\n          className={S.arrow}\r\n          src={arrow}\r\n          alt=\"стрелка\"\r\n        />\r\n      </div>\r\n      <div>Время обновления : {props.nowTime}</div>\r\n      <button className={S.button}>Обновить</button>\r\n      <button className={S.button}>Удалить</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport S from \"./CardCity.module.css\";\r\nimport Card from \"./Card\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst CardCity = (props) => {\r\n  let addCardCity = props.state.dataCity.cityData.map((city) => (\r\n    <Card\r\n      key={city.key}\r\n      cityName={city.cityName}\r\n      temp={city.temp}\r\n      pressure={city.pressure}\r\n      humidity={city.humidity}\r\n      windSpeed={city.windSpeed}\r\n      windDeg={city.windDeg}\r\n      nowTime={city.nowTime}\r\n      deliteCityCardAC={props.deliteCityCardAC}\r\n    />\r\n  ));\r\n\r\n  return <div className={S.cardBody}>{addCardCity}</div>;\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    state: state,\r\n  };\r\n};\r\n\r\nconst CardCityContainer = connect(mapStateToProps, null)(CardCity);\r\n\r\nexport default CardCityContainer;\r\n","import {\r\n    applyMiddleware,\r\n    combineReducers,\r\n    createStore\r\n} from \"redux\";\r\nimport cityReducer from './CityReducer';\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nlet redusers = combineReducers({\r\n    dataCity: cityReducer\r\n});\r\n\r\nlet store = createStore(redusers, applyMiddleware(thunkMiddleware));\r\n\r\nwindow.store = store;\r\n\r\nexport default store;","import React from 'react';\nimport S from './App.module.css';\nimport {InputCityContainer} from './components/InputCity';\nimport CardCity from './components/CardCity';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/reduxStore';\n\n\nfunction App(props) {\n\n\n  return (\n    <div className={S.App}>\n      <InputCityContainer  state = {props.state}/>\n      <CardCity state = {props.state} className={S.CardCity} />\n    </div>\n  );\n}\n\nconst AppIni = (props) => {\n  return (\n    <BrowserRouter>\n    <Provider store = {store}>\n      <App state = {props.store} /> \n    </Provider>\n    </BrowserRouter>\n  )\n}\n\n\n\nexport default AppIni;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AppIni from './App';\nimport store from './redux/reduxStore';\n\n\nReactDOM.render(\n  \n    <AppIni store = {store.getState()} />,\n  document.getElementById('root')\n  \n);\n\n\n"],"sourceRoot":""}